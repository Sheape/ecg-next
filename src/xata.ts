// Generated by Xata Codegen 0.27.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "ecg",
    columns: [
      { name: "userId", type: "string", notNull: true, defaultValue: "null" },
      { name: "recordId", type: "string", notNull: true, defaultValue: "null" },
      {
        name: "imageLink",
        type: "string",
        notNull: true,
        defaultValue: "null",
      },
      { name: "gender", type: "string", defaultValue: "" },
      { name: "age", type: "int" },
      { name: "symptoms", type: "text" },
      { name: "prediction", type: "json" },
      { name: "patientName", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Ecg = InferredTypes["ecg"];
export type EcgRecord = Ecg & XataRecord;

export type DatabaseSchema = {
  ecg: EcgRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Sheape-s-workspace-a1u55j.ap-southeast-2.xata.sh/db/heartread",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
